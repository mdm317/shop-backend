// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id    String  @id @default(cuid())
  userId String @unique
  password String
  name  String
  point Int   @default(0)
  email String? @unique
  phone String?   @unique
  isAdmin Boolean @default(false)
  reviews Review[]
  qnas Qna[]
  basket Basket?
  orders Order[]
  addresses Address[]
  products UserBuyProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Product{
  id    String  @id @default(cuid())
  price Int 
  stock Int 
  name String
  productImage Image[]
  description String?
  thumbnail String?
  willDelete Boolean @default(false)
  orders Order[]
  reviews Review[]
  qnas Qna[]
  baskets Basket[]
  users UserBuyProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Image{
  id    String  @id @default(cuid())
  url String
  product Product     @relation(fields: [productId], references: [id])
  productId      String
  idx Int   
}
model UserBuyProduct {
  product Product     @relation(fields: [productId], references: [id])
  productId      String     
  user    User @relation(fields: [userId], references: [id])
  userId  String      // relation scalar field (used in the `@relation` attribute above)
  createdAt   DateTime @default(now())
  @@id([productId, userId])
}
model Address{
  id    String  @id @default(cuid())
  user  User @relation(fields:  [userId], references: [id])
  userId String
  address String 
  additional String?
  zipcode String
}
model Qna{
  id    String  @id @default(cuid())
  content String
  user  User @relation(fields:  [userId], references: [id])
  userId String
  product  Product @relation(fields:  [productId], references: [id])
  productId String
  answer   Qna?   @relation("Qna", fields: [answerId], references: [id])
  question Qna?   @relation("Qna")
  answerId String?
    createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Review{
  id    String  @id @default(cuid())
  content String
  rating Int
  image String?
  user  User @relation(fields:  [userId], references: [id])
  userId String
  product  Product @relation(fields:  [productId], references: [id])
  productId String
  order  Order @relation(fields:  [orderId], references: [id])
  orderId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order{
  id    String  @id @default(cuid())
  user  User @relation(fields:  [userId], references: [id])
  userId String
  products Product[]
  orderNumber String
  name String
  address1 String
  address2 String?
  zipcode  String
  phone String
  message String?
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model Basket{
  id    String  @id @default(cuid())
  user  User? @relation(fields:  [userId], references: [id])
  userId String? @unique
  products Product[]
}
model ProductInOrderCount{
  order  Order @relation(fields:  [orderId], references: [id])
  orderId String 
  product  Product @relation(fields:  [productId], references: [id])
  productId String 
  @@id([orderId, productId])
  count Int
}